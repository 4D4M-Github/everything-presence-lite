esphome:
  name: ${name}
  comment: "EPL_kloppy"
  friendly_name: ${friendly_name}
  name_add_mac_suffix: False

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging, Home Assistant API, OTA
logger:
api:
ota:
wifi:
  power_save_mode: none

i2c:
  - id: bus_epl
    sda: 21
    scl: 22
    scan: true

light:
  - platform: status_led
    name: ESP32 LED
    pin: GPIO14
    internal: False
    restore_mode: ALWAYS_OFF

binary_sensor:
  - platform: template
    name: "Occupancy"
    id: occupancy
    device_class: occupancy
  - platform: template
    name: "Zone 1 Occupancy"
    id: zone1_occupancy
    device_class: occupancy
    filters:
      - delayed_off: !lambda return (id(zone1_off_delay).state *1000);
  - platform: template
    name: "Zone 2 Occupancy"
    id: zone2_occupancy
    device_class: occupancy
    filters:
      - delayed_off: !lambda return (id(zone2_off_delay).state *1000);
  - platform: template
    name: "Zone 3 Occupancy"
    id: zone3_occupancy
    device_class: occupancy
    filters:
      - delayed_off: !lambda return (id(zone3_off_delay).state *1000);
  - platform: template
    name: "Zone 4 Occupancy"
    id: zone4_occupancy
    device_class: occupancy
    filters:
      - delayed_off: !lambda return (id(zone4_off_delay).state *1000);

switch:
  - platform: template
    name: "Flip X"
    id: flip_x
    optimistic: True
    entity_category: config
    device_class: switch
    restore_mode: restore_default_off

number:
  - platform: template
    name: "Z1 X1"
    id: zone1_begin_x
    max_value: 600
    min_value: -600
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: -600
  - platform: template
    name: "Z1 X2"
    id: zone1_end_x
    max_value: 600
    min_value: -600
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 600
  - platform: template
    name: "Z1 Y1"
    id: zone1_begin_y
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z1 Y2"
    id: zone1_end_y
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 600
  - platform: template
    name: "Z1 rotation"
    id: zone1_rotation
    max_value: 180
    min_value: -180
    unit_of_measurement: "°"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z1 Occupancy Delay"
    id: zone1_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
  - platform: template
    name: "Z2 X1"
    id: zone2_begin_x
    max_value: 600
    min_value: -600
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: -600
  - platform: template
    name: "Z2 X2"
    id: zone2_end_x
    max_value: 600
    min_value: -600
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 600
  - platform: template
    name: "Z2 Y1"
    id: zone2_begin_y
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z2 Y2"
    id: zone2_end_y
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z2 rotation"
    id: zone2_rotation
    max_value: 180
    min_value: -180
    unit_of_measurement: "°"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z2 Occupancy Delay"
    id: zone2_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
  - platform: template
    name: "Z3 X1"
    id: zone3_begin_x
    max_value: 600
    min_value: -600
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: -600
  - platform: template
    name: "Z3 X2"
    id: zone3_end_x
    max_value: 600
    min_value: -600
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 600
  - platform: template
    name: "Z3 Y1"
    id: zone3_begin_y
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z3 Y2"
    id: zone3_end_y
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z3 rotation"
    id: zone3_rotation
    max_value: 180
    min_value: -180
    unit_of_measurement: "°"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z3 Occupancy Delay"
    id: zone3_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
  - platform: template
    name: "Z4 X1"
    id: zone4_begin_x
    max_value: 600
    min_value: -600
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: -600
  - platform: template
    name: "Z4 X2"
    id: zone4_end_x
    max_value: 600
    min_value: -600
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 600
  - platform: template
    name: "Z4 Y1"
    id: zone4_begin_y
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z4 Y2"
    id: zone4_end_y
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z4 rotation"
    id: zone4_rotation
    max_value: 180
    min_value: -180
    unit_of_measurement: "°"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Z4 Occupancy Delay"
    id: zone4_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15

sensor:
  - platform: bh1750
    name: Illuminance
    id: illuminance_sensor
    i2c_id: bus_epl
    address: 0x23
    update_interval: 1s
    accuracy_decimals: 2
    filters:
    - throttle_average: 10s
  - platform: template
    name: "Target 1 X"
    id: target1_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 1 Y"
    id: target1_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 2 X"
    id: target2_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 2 Y"
    id: target2_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 3 X"
    id: target3_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 3 Y"
    id: target3_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 1 Angle"
    id: target1_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement
  - platform: template
    name: "Target 2 Angle"
    id: target2_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement
  - platform: template
    name: "Target 3 Angle"
    id: target3_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement
  - platform: template
    name: "Target 1 Distance"
    id: target1_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 2 Distance"
    id: target2_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 3 Distance"
    id: target3_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Zone 1 Target Count"
    id: zone1_target_count
    accuracy_decimals: 0
  - platform: template
    name: "Zone 2 Target Count"
    id: zone2_target_count
    accuracy_decimals: 0
  - platform: template
    name: "Zone 3 Target Count"
    id: zone3_target_count
    accuracy_decimals: 0
  - platform: template
    name: "Zone 4 Target Count"
    id: zone4_target_count
    accuracy_decimals: 0

uart:
  id: uart_bus
  tx_pin: 
    number: GPIO17
    mode:
      input: true
      pullup: true
  rx_pin: 
    number: GPIO16
    mode:
      input: true
      pullup: true
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  data_bits: 8
  debug:
    direction: BOTH
    dummy_receiver: True
    after:
      delimiter: [0X55, 0XCC]
    sequence:
      # - lambda: UARTDebug::log_hex(direction, bytes, ' ');
      - lambda: |-
          const float RADIANS_TO_DEGREES = 180.0 / 3.14159265358979323846;

          // throttle updating
          static unsigned long mmwave_update_time = 0;
          
          if ((millis() - mmwave_update_time) <= 1000) return;
          
          mmwave_update_time = millis();

          // "unpack" data
          int16_t flipx = id(flip_x).state ? -1 : 1;
          uint16_t twobytes;

          #define getbytes(V, N, F) twobytes = (bytes[N + 1] << 8) + bytes[N]; int16_t V = (twobytes & 0x7FFF) * ((twobytes >> 15) ? -1 : 1) * F

          getbytes(p1_x, 4, flipx);
          getbytes(p1_y, 6, -1);
          float p1_angle = atan2(p1_y, p1_x) * RADIANS_TO_DEGREES;
          float p1_distance = sqrt(p1_x * p1_x + p1_y * p1_y);

          getbytes(p2_x, 12, flipx);
          getbytes(p2_y, 14, -1);
          float p2_angle = atan2(p2_y, p2_x) * RADIANS_TO_DEGREES;
          float p2_distance = sqrt(p2_x * p2_x + p2_y * p2_y);

          getbytes(p3_x, 20, flipx);
          getbytes(p3_y, 22, -1);
          float p3_angle = atan2(p3_y, p3_x) * RADIANS_TO_DEGREES;
          float p3_distance = sqrt(p3_x * p3_x + p3_y * p3_y);

          // publish states

          id(target1_x).publish_state(p1_x);
          id(target1_y).publish_state(p1_y);
          id(target1_distance).publish_state(p1_distance);
          id(target1_angle).publish_state(p1_angle);

          id(target2_x).publish_state(p2_x);
          id(target2_y).publish_state(p2_y);
          id(target2_distance).publish_state(p2_distance);
          id(target2_angle).publish_state(p2_angle);

          id(target3_x).publish_state(p3_x);
          id(target3_y).publish_state(p3_y);
          id(target3_distance).publish_state(p3_distance);
          id(target3_angle).publish_state(p3_angle);

          id(occupancy).publish_state(p1_distance > 0 || p2_distance > 0 || p3_distance > 0);

          // determine zone occupancy

          int zone1_count = 0;
          if (id(zone1_end_y).state > 0)
          {
            if (p1_distance > 0)
            {
              float targetAngle = (p1_angle - id(zone1_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p1_distance * cos(targetAngle) * 0.1;
              float targetY = p1_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone1_begin_x).state && targetX <= id(zone1_end_x).state) &&
                  (targetY >= id(zone1_begin_y).state && targetY <= id(zone1_end_y).state))
              {
                zone1_count++;
              }
            }

            if (p2_distance > 0)
            {
              float targetAngle = (p2_angle - id(zone1_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p2_distance * cos(targetAngle) * 0.1;
              float targetY = p2_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone1_begin_x).state && targetX <= id(zone1_end_x).state) &&
                  (targetY >= id(zone1_begin_y).state && targetY <= id(zone1_end_y).state))
              {
                zone1_count++;
              }
            }

            if (p3_distance > 0)
            {
              float targetAngle = (p3_angle - id(zone1_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p3_distance * cos(targetAngle) * 0.1;
              float targetY = p3_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone1_begin_x).state && targetX <= id(zone1_end_x).state) &&
                  (targetY >= id(zone1_begin_y).state && targetY <= id(zone1_end_y).state))
              {
                zone1_count++;
              }
            }
          }

          id(zone1_occupancy).publish_state(zone1_count > 0);
          id(zone1_target_count).publish_state(zone1_count);

          int zone2_count = 0;
          if (id(zone2_end_y).state > 0)
          {
            if (id(target1_distance).state > 0 )
            {
              float targetAngle = (p1_angle - id(zone2_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p1_distance * cos(targetAngle) * 0.1;
              float targetY = p1_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone2_begin_x).state && targetX <= id(zone2_end_x).state) &&
                  (targetY >= id(zone2_begin_y).state && targetY <= id(zone2_end_y).state))
              {
                zone2_count++;
              }
            }

            if (id(target2_distance).state > 0 )
            {
              float targetAngle = (p2_angle - id(zone2_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p2_distance * cos(targetAngle) * 0.1;
              float targetY = p2_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone2_begin_x).state && targetX <= id(zone2_end_x).state) &&
                  (targetY >= id(zone2_begin_y).state && targetY <= id(zone2_end_y).state))
              {
                zone2_count++;
              }
            }
            
            if (id(target3_distance).state > 0 )
            {
              float targetAngle = (p3_angle - id(zone2_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p3_distance * cos(targetAngle) * 0.1;
              float targetY = p3_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone2_begin_x).state && targetX <= id(zone2_end_x).state) &&
                  (targetY >= id(zone2_begin_y).state && targetY <= id(zone2_end_y).state))
              {
                zone2_count++;
              }
            }
          }

          id(zone2_occupancy).publish_state(zone2_count > 0);
          id(zone2_target_count).publish_state(zone2_count);     

          int zone3_count = 0;
          if (id(zone3_end_y).state > 0)
          {
            if (id(target1_distance).state > 0 )
            {
              float targetAngle = (p1_angle - id(zone3_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p1_distance * cos(targetAngle) * 0.1;
              float targetY = p1_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone3_begin_x).state && targetX <= id(zone3_end_x).state) &&
                  (targetY >= id(zone3_begin_y).state && targetY <= id(zone3_end_y).state))
              {
                zone3_count++;
              }
            }

            if (id(target2_distance).state > 0 )
            {
              float targetAngle = (p2_angle - id(zone3_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p2_distance * cos(targetAngle) * 0.1;
              float targetY = p2_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone3_begin_x).state && targetX <= id(zone3_end_x).state) &&
                  (targetY >= id(zone3_begin_y).state && targetY <= id(zone3_end_y).state))
              {
                zone3_count++;
              }
            }
            
            if (id(target3_distance).state > 0 )
            {
              float targetAngle = (p3_angle - id(zone3_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p3_distance * cos(targetAngle) * 0.1;
              float targetY = p3_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone3_begin_x).state && targetX <= id(zone3_end_x).state) &&
                  (targetY >= id(zone3_begin_y).state && targetY <= id(zone3_end_y).state))
              {
                zone3_count++;
              }
            }
          }

          id(zone3_occupancy).publish_state(zone3_count > 0);
          id(zone3_target_count).publish_state(zone3_count);   

          int zone4_count = 0;
          if (id(zone4_end_y).state > 0)
          {
            if (id(target1_distance).state > 0 )
            {
              float targetAngle = (p1_angle - id(zone4_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p1_distance * cos(targetAngle) * 0.1;
              float targetY = p1_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone4_begin_x).state && targetX <= id(zone4_end_x).state) &&
                  (targetY >= id(zone4_begin_y).state && targetY <= id(zone4_end_y).state))
              {
                zone4_count++;
              }
            }

            if (id(target2_distance).state > 0 )
            {
              float targetAngle = (p2_angle - id(zone4_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p2_distance * cos(targetAngle) * 0.1;
              float targetY = p2_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone4_begin_x).state && targetX <= id(zone4_end_x).state) &&
                  (targetY >= id(zone4_begin_y).state && targetY <= id(zone4_end_y).state))
              {
                zone4_count++;
              }
            }
            
            if (id(target3_distance).state > 0 )
            {
              float targetAngle = (p3_angle - id(zone4_rotation).state) / RADIANS_TO_DEGREES;
              float targetX = p3_distance * cos(targetAngle) * 0.1;
              float targetY = p3_distance * sin(targetAngle) * 0.1;

              if ((targetX >= id(zone4_begin_x).state && targetX <= id(zone4_end_x).state) &&
                  (targetY >= id(zone4_begin_y).state && targetY <= id(zone4_end_y).state))
              {
                zone4_count++;
              }
            }
          }

          id(zone4_occupancy).publish_state(zone4_count > 0);
          id(zone4_target_count).publish_state(zone4_count);   

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
